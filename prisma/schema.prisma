// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

// model Times {
//   id   Int    @id @default(autoincrement())
//   name String @unique
// }

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model User {
  id                     Int      @id @default(autoincrement())
  name                   String
  role_id                Int      @default(2)
  gender_id              Int?
  email                  String   @unique
  address                String?
  phone                  String?  @unique
  bio                    String?
  profile_picture_url    String?
  is_path_android        Boolean  @default(false)
  is_path_web            Boolean  @default(false)
  is_path_ios            Boolean  @default(false)
  is_path_ml             Boolean  @default(false)
  is_path_flutter        Boolean  @default(false)
  is_path_fe             Boolean  @default(false)
  is_path_be             Boolean  @default(false)
  is_path_react          Boolean  @default(false)
  is_path_devops         Boolean  @default(false)
  is_path_gcp            Boolean  @default(false)
  is_monday_available    Boolean  @default(false)
  is_tuesday_available   Boolean  @default(false)
  is_wednesday_available Boolean  @default(false)
  is_thursday_available  Boolean  @default(false)
  is_friday_available    Boolean  @default(false)
  is_saturday_available  Boolean  @default(false)
  is_sunday_available    Boolean  @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now())
  Mentee                 Mentee?
  Mentor                 Mentor?
  Role                   Role     @relation(fields: [role_id], references: [id])
  Gender                 Gender?  @relation(fields: [gender_id], references: [id])
}

model Mentee {
  user_id            Int                  @unique
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  User               User                 @relation(fields: [user_id], references: [id])
  Mentoring_Attendee Mentoring_Attendee[]
}

model Mentor {
  user_id        Int         @unique
  average_rating Float?
  rating_count   Int?
  created_at     DateTime    @default(now()) @map("created_at")
  updated_at     DateTime    @default(now()) @map("updated_at")
  User           User        @relation(fields: [user_id], references: [id])
  Mentoring      Mentoring[]
}

model Mentoring {
  id                 Int                  @id @default(autoincrement())
  mentor_id          Int
  start_time         DateTime
  end_time           DateTime
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  Mentor             Mentor               @relation(fields: [mentor_id], references: [user_id])
  Mentoring_Attendee Mentoring_Attendee[]
}

model Mentoring_Attendee {
  mentoring_id Int
  mentee_id    Int
  rating       Int?
  feedback     String?
  en_feedback  String?
  sentiment_id Int?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now())
  Mentoring    Mentoring  @relation(fields: [mentoring_id], references: [id])
  Mentee       Mentee     @relation(fields: [mentee_id], references: [user_id])
  Sentiment    Sentiment? @relation(fields: [sentiment_id], references: [id])

  @@id([mentoring_id, mentee_id])
}

model Sentiment {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  Mentoring_Attendee Mentoring_Attendee[]
}

enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}
